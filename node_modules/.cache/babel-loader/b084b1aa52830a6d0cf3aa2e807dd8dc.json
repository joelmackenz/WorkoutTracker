{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Vivian\\\\Desktop\\\\Coding projects\\\\WorkoutTracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Vivian\\\\Desktop\\\\Coding projects\\\\WorkoutTracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\Vivian\\\\Desktop\\\\Coding projects\\\\WorkoutTracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\Vivian\\\\Desktop\\\\Coding projects\\\\WorkoutTracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Vivian\\\\Desktop\\\\Coding projects\\\\WorkoutTracker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from\"react\";import SelectStrengthExercises from\"../Select-exercises/Select-strength-exercises\";import SelectCardioExercises from\"../Select-exercises/Select-cardio-exercises\";import StrengthWorkoutDisplay from\"../Workout-displays/Strength-Workout-display\";import CardioWorkoutDisplay from\"../Workout-displays/Cardio-workout-display\";import\"./Current-workout.css\";var CurrentWorkout=/*#__PURE__*/function(_React$Component){_inherits(CurrentWorkout,_React$Component);var _super=_createSuper(CurrentWorkout);function CurrentWorkout(props){var _this;_classCallCheck(this,CurrentWorkout);_this=_super.call(this,props);_this.state={currentWorkout:[],currentExercises:[],date:new Date().getFullYear()+'-'+(new Date().getMonth()+1)+'-'+new Date().getDate()};_this.updateExerciseList=_this.updateExerciseList.bind(_assertThisInitialized(_this));_this.updateWorkoutList=_this.updateWorkoutList.bind(_assertThisInitialized(_this));_this.resetWorkout=_this.resetWorkout.bind(_assertThisInitialized(_this));_this.saveWorkout=_this.saveWorkout.bind(_assertThisInitialized(_this));_this.newWorkout=_this.newWorkout.bind(_assertThisInitialized(_this));_this.removeExercise=_this.removeExercise.bind(_assertThisInitialized(_this));return _this;}_createClass(CurrentWorkout,[{key:\"resetWorkout\",value:function resetWorkout(){this.setState({currentExercises:[]});}},{key:\"updateExerciseList\",value:function updateExerciseList(exercise){if(this.state.currentExercises.includes(exercise)){}else{var currentExercisesClone=Array.from(this.state.currentExercises);currentExercisesClone.push(exercise);this.setState({currentExercises:currentExercisesClone});this.props.updateCurrentExercises(currentExercisesClone);}}},{key:\"updateWorkoutList\",value:function updateWorkoutList(info){this.setState({currentWorkout:info});this.props.updateCurrentWorkout(info);}},{key:\"saveWorkout\",value:function saveWorkout(){this.props.saveWorkout(this.state.currentWorkout,this.state.date);}},{key:\"newWorkout\",value:function newWorkout(){if(this.state.currentWorkout){//Save the workout\nthis.props.saveWorkout(this.state.currentWorkout);//setState will clear the currentExercises\nthis.setState({currentExercises:[]});}else{this.setState({currentExercises:[]});}}},{key:\"removeExercise\",value:function removeExercise(exercise){var currentExercisesClone=Array.from(this.state.currentExercises);// currentExercisesClone.filter(function(value){ return value === exercise;});\n//^^^^^^^^^^^^ This must select everything that isn't the exercise and return them\nthis.setState({currentExercises:currentExercisesClone});}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"select-and-display\"},/*#__PURE__*/React.createElement(\"div\",{className:\"select-display-element\"},/*#__PURE__*/React.createElement(\"button\",{className:\"save-new-element\",onClick:this.newWorkout},\"Save and Clear\"),/*#__PURE__*/React.createElement(\"button\",{className:\"save-new-element\",onClick:this.saveWorkout},\"Save\"),/*#__PURE__*/React.createElement(\"button\",{className:\"save-new-element\",onClick:this.resetWorkout},\"Clear\")),this.props.workoutType===\"strength\"&&/*#__PURE__*/React.createElement(\"div\",{className:\"select-display-element-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"inner-1\"},/*#__PURE__*/React.createElement(SelectStrengthExercises,{onChange:this.updateExerciseList})),/*#__PURE__*/React.createElement(\"div\",{className:\"inner-2\"},/*#__PURE__*/React.createElement(StrengthWorkoutDisplay,{onChange:this.updateWorkoutList,exerciseList:this.state.currentExercises}))),this.props.workoutType===\"cardio\"&&/*#__PURE__*/React.createElement(\"div\",{className:\"select-display-element-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"inner-1\"},/*#__PURE__*/React.createElement(SelectCardioExercises,{onChange:this.updateExerciseList})),/*#__PURE__*/React.createElement(\"div\",{className:\"inner-2\"},/*#__PURE__*/React.createElement(CardioWorkoutDisplay,{removeExercise:this.removeExercise,onChange:this.updateWorkoutList,exerciseList:this.state.currentExercises}))));}}]);return CurrentWorkout;}(React.Component);export default CurrentWorkout;","map":{"version":3,"sources":["C:/Users/Vivian/Desktop/Coding projects/WorkoutTracker/src/Components/Current-workout/Current-workout.js"],"names":["React","SelectStrengthExercises","SelectCardioExercises","StrengthWorkoutDisplay","CardioWorkoutDisplay","CurrentWorkout","props","state","currentWorkout","currentExercises","date","Date","getFullYear","getMonth","getDate","updateExerciseList","bind","updateWorkoutList","resetWorkout","saveWorkout","newWorkout","removeExercise","setState","exercise","includes","currentExercisesClone","Array","from","push","updateCurrentExercises","info","updateCurrentWorkout","workoutType","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SelectStrengthExercises from \"../Select-exercises/Select-strength-exercises\";\nimport SelectCardioExercises from \"../Select-exercises/Select-cardio-exercises\";\nimport StrengthWorkoutDisplay from \"../Workout-displays/Strength-Workout-display\";\nimport CardioWorkoutDisplay from \"../Workout-displays/Cardio-workout-display\"\nimport \"./Current-workout.css\"\n\nclass CurrentWorkout extends React.Component{\n    constructor(props) {\n        super(props);\n    this.state = {\n        currentWorkout: [],\n        currentExercises: [],\n        date: new Date().getFullYear()+'-'+(new Date().getMonth()+1)+'-'+new Date().getDate()\n    }\n    this.updateExerciseList = this.updateExerciseList.bind(this);\n    this.updateWorkoutList = this.updateWorkoutList.bind(this); \n    this.resetWorkout = this.resetWorkout.bind(this);\n    this.saveWorkout = this.saveWorkout.bind(this);\n    this.newWorkout = this.newWorkout.bind(this);\n    this.removeExercise = this.removeExercise.bind(this)\n    }   \n\n    resetWorkout() {\n        this.setState({\n            currentExercises: []\n        })\n    }\n\n    updateExerciseList(exercise) {\n        if (this.state.currentExercises.includes(exercise)) {\n        } else {\n            const currentExercisesClone = Array.from(this.state.currentExercises);\n            currentExercisesClone.push(exercise);\n            this.setState({\n                currentExercises: currentExercisesClone\n            })\n            this.props.updateCurrentExercises(currentExercisesClone)\n        }\n    }\n\n    updateWorkoutList(info) {\n        this.setState({\n            currentWorkout: info\n        })\n        this.props.updateCurrentWorkout(info)\n    }\n\n    saveWorkout() {\n        this.props.saveWorkout(this.state.currentWorkout, this.state.date)\n    }\n\n    newWorkout() {\n        if (this.state.currentWorkout) {\n            //Save the workout\n            this.props.saveWorkout(this.state.currentWorkout);\n            //setState will clear the currentExercises\n            this.setState({\n                currentExercises: []\n            })\n        } else {\n            this.setState({\n                currentExercises: []\n            })\n        }\n    }\n\n    removeExercise(exercise){\n        let currentExercisesClone = Array.from(this.state.currentExercises)\n        // currentExercisesClone.filter(function(value){ return value === exercise;});\n        //^^^^^^^^^^^^ This must select everything that isn't the exercise and return them\n        this.setState({\n            currentExercises: currentExercisesClone\n        })\n    }\ns\n\n    render(){\n        return(\n        <div className=\"select-and-display\">\n                <div className=\"select-display-element\">\n                    <button className=\"save-new-element\" onClick={this.newWorkout}>Save and Clear</button>\n                    <button className=\"save-new-element\" onClick={this.saveWorkout}>Save</button>\n                    <button className=\"save-new-element\" onClick={this.resetWorkout}>Clear</button>\n                </div>\n                {/* If strength is selected: */}\n                {this.props.workoutType === \"strength\" && \n                    <div className=\"select-display-element-2\">   \n                        <div className=\"inner-1\">\n                            <SelectStrengthExercises   \n                                onChange={this.updateExerciseList}\n                            />\n                        </div>\n                        <div className=\"inner-2\">\n                            <StrengthWorkoutDisplay \n                                onChange={this.updateWorkoutList} \n                                exerciseList={this.state.currentExercises}\n                            />\n                        </div>\n                    </div>\n                }\n                {/* If cardio is selected: */}\n                {this.props.workoutType === \"cardio\" && \n                    <div className=\"select-display-element-2\">   \n                         <div className=\"inner-1\">\n                             <SelectCardioExercises   \n                                 onChange={this.updateExerciseList}\n                             />\n                        </div>\n                        <div className=\"inner-2\">\n                            <CardioWorkoutDisplay \n                                removeExercise={this.removeExercise}\n                                onChange={this.updateWorkoutList} \n                                exerciseList={this.state.currentExercises}\n                                />\n                        </div>\n                     </div>\n                }\n        </div>\n        )\n    }\n}\n\nexport default CurrentWorkout;"]},"metadata":{},"sourceType":"module"}