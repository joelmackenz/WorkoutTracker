{"version":3,"sources":["Components/Select-exercises/Select-exercises.js","Components/Number-input/Number-input.js","Components/Select-exercises/Exercise-display.js","Components/Workout-display/Workout-display.js","Components/Current-workout/Current-workout.js","Components/Workout-Page/Workout-page.js","Components/Previous-workouts-page/Previous-workouts-page.js","Components/Home.js","Components/Nav-bar/Nav-bar.js","App.js","serviceWorker.js","index.js"],"names":["selectExercises","props","state","selectedExercise","handleChange","bind","e","preventDefault","this","setState","target","value","onChange","id","selected","disabled","hidden","React","Component","NumberInput","chosenReps","changeReps","submitChange","className","onSubmit","type","ExerciseDisplay","sets","reps","exercise","addSet","WorkoutDisplay","selectedExercises","saveExercises","exerciseInfoArray","selectedExercisesClone","Array","from","push","exerciseList","map","entry","i","key","CurrentWorkout","currentWorkout","currentExercises","date","Date","getFullYear","getMonth","getDate","updateExerciseList","updateWorkoutList","resetWorkout","saveWorkout","newWorkout","includes","currentExercisesClone","updateCurrentExercises","info","updateCurrentWorkout","onClick","WorkoutPage","exerciseInfo","workoutInfo","currentWorkoutInfo","PreviousWorkoutsPage","workoutsInfo","length","x","Object","values","index","workouts","Home","href","Nav","to","App","useState","setCurrentWorkoutInfo","workoutDate","setWorkoutDate","updateWorkoutInfo","workoutInfoClone","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e617bf7.chunk.js","sourcesContent":["import React from \"react\";\n\nclass selectExercises extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            selectedExercise: \"\",\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        e.preventDefault();\n        this.setState({\n            selectedExercise: e.target.value\n        })\n        this.props.onChange(e.target.value)\n    }\n\n    render(){\n        return(\n                <select \n                id=\"lessonSelect\" \n                onChange={this.handleChange}>\n                    <option value=\"\" selected disabled hidden>Choose an exercise</option>\n                    <option value=\"Benchpress\">Benchpress</option>\n                    <option value=\"Squat\">Squat</option>\n                    <option value=\"Deadlift\">Deadlift</option>\n                    <option value=\"Shoulder press\">Shoulder Press</option>\n                </select>\n        )\n    }\n}\n\nexport default selectExercises;","import React from \"react\";\nimport \"./Number-input.css\";\n\nclass NumberInput extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            chosenReps: 10,\n        }\n        this.changeReps = this.changeReps.bind(this)\n        this.submitChange = this.submitChange.bind(this)\n    }\n\n    changeReps(e){\n        this.setState ({\n            chosenReps: e.target.value\n        })\n    }\n\n    submitChange(e) {\n        e.preventDefault();\n        const chosenReps = this.state.chosenReps;\n        this.props.onChange(chosenReps);\n    }\n\n    render(){\n        return (\n            <form className=\"form\" onSubmit={this.submitChange}>\n                <p>Reps</p>\n                <input className=\"input\" type=\"number\" onChange={this.changeReps} value={this.state.chosenReps}/>\n                <input className=\"button\" type=\"submit\" value=\"Set\"/>\n            </form>\n        )\n    }\n}\n\nexport default NumberInput;","//This displays one exercise's info.\n\nimport React from \"react\";\nimport NumberInput from \"../Number-input/Number-input\"\nimport \"./Exercise-display.css\";\n\nclass ExerciseDisplay extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            sets: 0,\n            reps: 0,\n            exercise: \"\",\n        }\n    this.addSet = this.addSet.bind(this);\n    }\n\n    addSet(reps){\n        this.setState({\n            sets: this.state.sets +1,\n            reps: reps,\n            exercise: this.props.exercise\n        })\n        this.props.onChange([this.state.sets + 1, reps, this.props.exercise])\n    }\n\n    render(){\n        return(\n            <div className=\"exercise\">\n                <h3 className=\"title\">{this.props.exercise}</h3>\n                <NumberInput onChange={this.addSet}/>\n                <div>\n                    <p>Complete Sets</p>\n                    <p>Sets: {this.state.sets}</p>\n                    <p>Reps: {this.state.reps}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ExerciseDisplay;","//This displays a number of exercises' info. It will map over the info taken from ../Select-exercises/Exercise-display.js\n\nimport React from \"react\";\nimport ExerciseDisplay from \"../Select-exercises/Exercise-display\";\nimport \"./Workout-display.css\";\n\nclass WorkoutDisplay extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n           selectedExercises: []\n        }\n        this.saveExercises = this.saveExercises.bind(this)\n    }\n\n    saveExercises(exerciseInfoArray) {\n        let selectedExercisesClone = Array.from(this.state.selectedExercises)\n        selectedExercisesClone.push(exerciseInfoArray)\n        this.setState({\n            selectedExercises: selectedExercisesClone\n        })\n        this.props.onChange(selectedExercisesClone)\n    }\n\n    render(){\n        return(\n            <div className=\"exercises\">\n                {this.props.exerciseList.map((entry, i) => \n                    <ExerciseDisplay \n                        key={i}\n                        exercise={entry} \n                        onChange={this.saveExercises}\n                    />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default WorkoutDisplay;","import React from \"react\";\nimport SelectExercises from \"../Select-exercises/Select-exercises\";\nimport WorkoutDisplay from \"../Workout-display/Workout-display\";\nimport \"./Current-workout.css\"\n\nclass CurrentWorkout extends React.Component{\n    constructor(props) {\n        super(props);\n    this.state = {\n        currentWorkout: [],\n        currentExercises: [],\n        date: new Date().getFullYear()+'-'+(new Date().getMonth()+1)+'-'+new Date().getDate()\n    }\n    this.updateExerciseList = this.updateExerciseList.bind(this);\n    this.updateWorkoutList = this.updateWorkoutList.bind(this); \n    this.resetWorkout = this.resetWorkout.bind(this);\n    this.saveWorkout = this.saveWorkout.bind(this);\n    this.newWorkout = this.newWorkout.bind(this);\n    }   \n\n    resetWorkout() {\n        this.setState({\n            currentExercises: []\n        })\n    }\n\n    updateExerciseList(exercise) {\n        if (this.state.currentExercises.includes(exercise)) {\n        } else {\n            const currentExercisesClone = Array.from(this.state.currentExercises);\n            currentExercisesClone.push(exercise);\n            this.setState({\n                currentExercises: currentExercisesClone\n            })\n            this.props.updateCurrentExercises(currentExercisesClone)\n        }\n    }\n\n    updateWorkoutList(info) {\n        this.setState({\n            currentWorkout: info\n        })\n        this.props.updateCurrentWorkout(info)\n    }\n\n    saveWorkout() {\n        this.props.saveWorkout(this.state.currentWorkout, this.state.date)\n    }\n\n    newWorkout() {\n        if (this.state.currentWorkout) {\n            //Save the workout\n            this.props.saveWorkout(this.state.currentWorkout);\n            //setState will clear the currentExercises\n            this.setState({\n                currentExercises: []\n            })\n        } else {\n            this.setState({\n                currentExercises: []\n            })\n        }\n    }\ns\n\n    render(){\n        return(\n        <div className=\"select-and-display\">\n                <div className=\"select-display-element\">\n                    <button className=\"save-new-element\" onClick={this.newWorkout}> Save and Clear</button>\n                    <button className=\"save-new-element\" onClick={this.saveWorkout}>Save</button>\n                    <button className=\"save-new-element\" onClick={this.resetWorkout}>Clear</button>\n                </div>\n                <div className=\"select-display-element\">\n                    <SelectExercises   \n                        onChange={this.updateExerciseList}\n                    />\n                </div>\n\n\n                <WorkoutDisplay \n                    onChange={this.updateWorkoutList} \n                    exerciseList={this.state.currentExercises}\n                />\n        </div>\n        )\n    }\n}\n\nexport default CurrentWorkout;","import React from \"react\";\nimport \"./Workout-page.css\";\nimport CurrentWorkout from \"../Current-workout/Current-workout\"\n\nexport class WorkoutPage extends React.Component {\n    constructor(props) {\n        super(props);\n    this.state = {\n        currentExercises: [],\n        currentWorkout: []\n    }\n    this.updateCurrentExercises = this.updateCurrentExercises.bind(this);\n    this.updateCurrentWorkout = this.updateCurrentWorkout.bind(this);\n    this.newWorkout = this.newWorkout.bind(this);\n    this.resetWorkout = this.resetWorkout.bind(this);\n    this.saveWorkout = this.saveWorkout.bind(this);  \n    }\n\n    updateCurrentExercises(exerciseInfo) {\n        this.setState({\n            currentExercises: exerciseInfo,\n        })\n    }\n\n    updateCurrentWorkout(workoutInfo) {\n        this.setState({\n            currentWorkout: workoutInfo\n        })\n    }\n\n    saveWorkout(currentWorkoutInfo, date) {\n        this.props.onChange(currentWorkoutInfo, date)\n    }\n\n    resetWorkout() {\n        this.setState({\n            currentExercises: []\n        })\n    }\n\n    newWorkout() {\n        if (this.state.currentWorkout) {\n            //onChange will save the current workout data\n            this.props.onChange(this.state.currentWorkout);\n            //setState will clear the currentExercises\n            this.setState({\n                currentExercises: []\n            })\n        } else {\n            this.setState({\n                currentExercises: []\n            })\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <CurrentWorkout \n                    updateCurrentExercises={this.updateCurrentExercises}\n                    updateCurrentWorkout={this.updateCurrentWorkout}\n                    saveWorkout={this.saveWorkout}/>\n            </div>\n        )\n    }\n}\n\nexport default WorkoutPage;","import React from \"react\";\n\nclass PreviousWorkoutsPage extends React.Component {\n\n    workouts() {\n        const workoutsInfo = this.props.workoutInfo;\n        const date = this.props.date;\n        if (workoutsInfo.length === 0) {\n            return <p>Input your first workout to start tracking your progress!<br/><br/>\n                    From the Workouts page: <ul><li>select an exercise,</li> <li>press the set button,</li> <li>and press \"save\"!</li></ul></p>\n        } else {\n            return workoutsInfo.map(x => \n                //Renders the dynamic workout number\n                <div> \n                    <h3>Workout date {date} </h3>\n                    <p>{//Renders all the dynamic info inside of that workout\n                        Object.values(x).map((value, index) => {\n                                return <p key={index}>\n                                    Set {value[0]}: {value[2]}: {value[1]} reps\n                                    </p>\n                                })\n                            }\n                    </p>\n                </div>\n                )\n                }\n            }\n\n    render(){\n        return(\n            <div>\n                {this.workouts()}\n            \n            </div>\n        )\n    }\n}\n\nexport default PreviousWorkoutsPage;","import React from \"react\";\n\n\nfunction Home() {\n    return (\n      <div>\n        <h2>Welcome to </h2>\n        <h1>Workout Tracker!</h1>\n        <ul>\n          <li>Track your workouts by exercise, reps, and sets</li>\n          <li>Set and save fitness goals</li>\n          <li>Chart and compare your previous workouts</li>\n        </ul><br/>\n        <h2>Press one of the header links to begin!</h2><br/>\n          <p>This is a beta-version of a workout-tracking app by Joel MacKenzie.<br/><br/>See the GitHub page for this project <a href=\"https://github.com/joelmackenz/WorkoutTracker\">here</a>,<br/>\n        see another project by Joel, Mandarin Flashcards, <a href=\"https://joelmackenz.github.io/Mandarin-Flashcard-Web-App\">here</a>,<br/>\n        and see more at <a href=\"https://joelmackenzie.ca\">joelmackenzie.ca</a>.\n        </p><br/>\n      </div>\n    );\n  }\n  \n  export default Home;\n  ","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport \"./Nav-bar.css\";\n\nfunction Nav() {\n\n  return (\n    <nav className='nav'>\n        <h1>Workout Tracker</h1>\n            <ul className=\"nav-links\">\n                <Link className=\"nav-link\" to='/'>\n                    <li>Home</li>\n                </Link>\n                <Link className=\"nav-link\" to='/workout'>\n                    <li>Workout</li>\n                </Link>\n                <Link className=\"nav-link\" to='/previous-workouts'>\n                    <li>Previous Workouts</li>\n                </Link>\n                <Link className=\"nav-link\" to='/placeholder'>\n                    <li>Goals</li>\n                </Link>\n            </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport './App.css';\nimport WorkoutPage from './Components/Workout-Page/Workout-page';\nimport PreviousWorkoutsPage from './Components/Previous-workouts-page/Previous-workouts-page'\nimport Home from './Components/Home';\nimport Nav from \"./Components/Nav-bar/Nav-bar\"\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  const [currentWorkoutInfo, setCurrentWorkoutInfo] = useState([]);\n  const [workoutDate, setWorkoutDate] = useState();\n\n  function updateWorkoutInfo(info, date) {\n    if (currentWorkoutInfo) {\n      const workoutInfoClone = Array.from(currentWorkoutInfo);\n      workoutInfoClone.push(info);\n      setCurrentWorkoutInfo(workoutInfoClone);\n      setWorkoutDate(date)\n  }}\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav/>\n        <Switch>\n          <Route \n            path=\"/\" \n            exact component={Home}/>\n          <Route \n            path=\"/workout\" \n            render={() => <WorkoutPage onChange={updateWorkoutInfo}/>}\n            />\n          <Route \n            path=\"/previous-workouts\" \n            render={(props) => <PreviousWorkoutsPage {...props} \n              workoutInfo={currentWorkoutInfo} \n              date={workoutDate}/>}\n            />\n          {/* <Route path=\"/goals\" component={GoalsPage} /> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}